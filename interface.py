import psycopg2
from psycopg2.extras import RealDictCursor
import math

print("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL")
db_user = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
db_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
db_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é itmo_farmers): ").strip() or "itmo_farmers"

DB_CONFIG = {
    "host": "localhost",
    "database": db_name,
    "user": db_user,
    "password": db_password
}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
user_input_digit = "\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: "

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ===
def get_connection():
    try:
        return psycopg2.connect(**DB_CONFIG, cursor_factory=RealDictCursor)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
        return None

# === –ü–∞–≥–∏–Ω–∞—Ü–∏—è ===
def paginate(items, page=1, per_page=10):
    total = len(items)
    pages = (total + per_page - 1) // per_page
    start = (page - 1) * per_page
    end = start + per_page
    return items[start:end], page, pages

# === 1. –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π) ===
def farm_list_function():
    conn = get_connection()
    if not conn:
        return

    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT fm.market_name, fm.city, fm.state, COALESCE(AVG(r.rating), 0) AS avg_rating,
                       COUNT(r.review_id) AS review_count
                FROM farmers_markets fm
                LEFT JOIN reviews r ON fm.market_id = r.market_id
                GROUP BY fm.market_id, fm.market_name, fm.city, fm.state
                ORDER BY fm.market_name
            """)
            markets = cur.fetchall()

        if not markets:
            print("\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–∞—Ö.")
            return

        page = 1
        while True:
            page_items, current_page, total_pages = paginate(markets, page, 10)
            print(f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages} ---")
            for m in page_items:
                avg = m['avg_rating']
                stars = "‚òÖ" * int(round(avg)) + "‚òÜ" * (5 - int(round(avg)))
                print(f"üìç {m['market_name']} | {m['city']}, {m['state']} | {stars} ({avg:.1f}) [{m['review_count']} –æ—Ç–∑—ã–≤–æ–≤]")

            print(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}")
            nav = input("\n[–ü]—Ä–µ–¥—ã–¥—É—â–∞—è, [–°]–ª–µ–¥—É—é—â–∞—è, [0] –ù–∞–∑–∞–¥: ").strip().lower()
            if nav == '0':
                break
            elif nav in ['–ø', '–Ω–∞–∑–∞–¥', 'prev', 'p'] and page > 1:
                page -= 1
            elif nav in ['—Å', '–≤–ø–µ—Ä—ë–¥', 'next', 'n'] and page < total_pages:
                page += 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞: {e}")
    finally:
        conn.close()

def show_menu(menu_dict):
    print("\n" + "-" * 40)
    for key, value in menu_dict.items():
        print(f"{key}. {value[1]}")
    print("-" * 40)
    try:
        return int(input(user_input_digit))
    except ValueError:
        return -1

def find_in_menu(menu_dict, user_choice):
    if user_choice == 0:
        return True, "\n–®–∞–≥ –Ω–∞–∑–∞–¥"
    elif user_choice in menu_dict:
        return False, menu_dict[user_choice][0]
    else:
        return False, "\n–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥!\n"

# === 4. –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ===
def input_feedback_function():
    market_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞: ").strip()
    user_name = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip()
    try:
        rating = int(input("–†–µ–π—Ç–∏–Ω–≥ (1-5): "))
        if rating < 1 or rating > 5:
            print("‚ùå –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
            return
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    review_text = input("–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º): ").strip()
    review_text = review_text or None

    conn = get_connection()
    if not conn:
        return

    try:
        with conn.cursor() as cur:
            cur.execute("SELECT market_id FROM farmers_markets WHERE LOWER(market_name) = %s", (market_name.lower(),))
            market = cur.fetchone()
            if not market:
                print("‚ùå –†—ã–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            cur.execute("""
                INSERT INTO reviews (market_id, user_name, rating, review_text)
                VALUES (%s, %s, %s, %s)
            """, (market['market_id'], user_name, rating, review_text))
            conn.commit()
            print("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
    finally:
        conn.close()

# === 3. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ ===
def farm_detail_information(market_name=None):
    if not market_name:
        market_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞: ").strip()
    if not market_name:
        print("‚ùå –ü—É—Å—Ç–æ–µ –∏–º—è.")
        return

    conn = get_connection()
    if not conn:
        return

    try:
        with conn.cursor() as cur:
            cur.execute("SELECT * FROM farmers_markets WHERE LOWER(market_name) = %s", (market_name.lower(),))
            market = cur.fetchone()

            if not market:
                print("‚ùå –†—ã–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            print(f"\n--- {market['market_name']} ---")
            print(f"üìç –ê–¥—Ä–µ—Å: {market['street']}, {market['city']}, {market['state']} {market['zip']}")
            print(f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({market['x']}, {market['y']})")
            if market['location'] and str(market['location']).strip() != '':
                print(f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {market['location']}")

            # –ü—Ä–æ–¥—É–∫—Ç—ã
            cur.execute("""
                SELECT p.product_name
                FROM market_products mp
                JOIN products p ON mp.product_id = p.product_id
                WHERE mp.market_id = %s
                ORDER BY p.product_name
            """, (market['market_id'],))
            products = cur.fetchall()
            if products:
                print("\nüçé –ü—Ä–æ–¥—É–∫—Ç—ã:")
                for p in products:
                    print(f" ‚Ä¢ {p['product_name']}")

            # –û–ø–ª–∞—Ç–∞
            cur.execute("""
                SELECT py.payment_name
                FROM market_payments mp
                JOIN payment_methods py ON mp.payment_id = py.payment_id
                WHERE mp.market_id = %s
                ORDER BY py.payment_name
            """, (market['market_id'],))
            payments = cur.fetchall()
            if payments:
                print("\nüí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:")
                for p in payments:
                    print(f" ‚Ä¢ {p['payment_name']}")

            # –°–æ—Ü—Å–µ—Ç–∏
            cur.execute("""
                SELECT sn.social_networks, msl.url
                FROM market_social_links msl
                JOIN social_networks sn ON msl.social_network_id = sn.social_network_id
                WHERE msl.market_id = %s
                ORDER BY sn.social_networks
            """, (market['market_id'],))
            socials = cur.fetchall()
            if socials:
                print("\nüåê –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:")
                for s in socials:
                    url = s['url'] if s['url'] else "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏"
                    print(f" ‚Ä¢ {s['social_networks']}: {url}")

            # –û—Ç–∑—ã–≤—ã
            cur.execute("""
                SELECT user_name, rating, review_text, created_at
                FROM reviews
                WHERE market_id = %s
                ORDER BY created_at DESC
            """, (market['market_id'],))
            reviews = cur.fetchall()
            if reviews:
                print(f"\nüí¨ –û—Ç–∑—ã–≤—ã ({len(reviews)}):")
                for r in reviews:
                    stars = "‚òÖ" * r['rating'] + "‚òÜ" * (5 - r['rating'])
                    date_str = r['created_at'].strftime('%d.%m.%Y')
                    print(f"[{r['user_name']}] {stars} ({date_str})")
                    if r['review_text']:
                        print(f"   \"{r['review_text']}\"")
            else:
                print("\nüìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

# === 5. –£–¥–∞–ª–∏—Ç—å —Ä—ã–Ω–æ–∫ ===
def delete_farm_function():
    market_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
    confirm = input(f"–£–¥–∞–ª–∏—Ç—å —Ä—ã–Ω–æ–∫ '{market_name}'? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    if confirm not in ['–¥–∞', 'yes', 'y']:
        print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    conn = get_connection()
    if not conn:
        return

    try:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM farmers_markets WHERE LOWER(market_name) = %s RETURNING market_id", (market_name.lower(),))
            if cur.fetchone():
                conn.commit()
                print(f"‚úÖ –†—ã–Ω–æ–∫ '{market_name}' —É–¥–∞–ª—ë–Ω.")
            else:
                print("‚ùå –†—ã–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        conn.rollback()
    finally:
        conn.close()

# === Haversine formula ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–≤ –º–∏–ª—è—Ö) ===
def haversine(lat1, lon1, lat2, lon2):
    R = 3958.8  # —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–∏–ª—è—Ö
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = (math.sin(dlat / 2) ** 2 +
         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

# === 2. –ü–æ–∏—Å–∫ —Ä—ã–Ω–∫–æ–≤ ===
def search_farm_function():
    search_menu = {
        1: ("city", "–ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É"),
        2: ("state", "–ü–æ–∏—Å–∫ –ø–æ —à—Ç–∞—Ç—É"),
        3: ("zip", "–ü–æ–∏—Å–∫ –ø–æ –ø–æ—á—Ç–æ–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É"),
        4: ("radius", "–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–¥–∏—É—Å—É (–≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)"),
        0: (None, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    }

    while True:
        choice = show_menu(search_menu)
        flag, data = find_in_menu(search_menu, choice)
        if flag:
            print(data)
            return
        search_type = data

        if search_type == "radius":
            try:
                lat = float(input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É (y): "))
                lon = float(input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É (x): "))
                radius = float(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –≤ –º–∏–ª—è—Ö: "))
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.")
                continue
        else:
            query_value = input(f"–í–≤–µ–¥–∏—Ç–µ {search_type}: ").strip()
            if not query_value:
                print("‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥.")
                continue

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        print("""
–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É:
1. –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
2. –ü–æ —É–±—ã–≤–∞–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
3. –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
0. –ë–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        """)
        try:
            sort_choice = int(input(user_input_digit))
        except ValueError:
            sort_choice = -1

        if sort_choice == 0:
            sort_mode = 0
        elif sort_choice == 1:
            sort_mode = 1
        elif sort_choice == 2:
            sort_mode = 2
        elif sort_choice == 3:
            sort_mode = 3
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            sort_mode = 0

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        conn = get_connection()
        if not conn:
            return

        try:
            with conn.cursor() as cur:
                if search_type == "radius":
                    cur.execute("SELECT market_name, city, state, y AS lat, x AS lon FROM farmers_markets")
                    results = []
                    for row in cur.fetchall():
                        if None in (row['lat'], row['lon']):
                            continue
                        dist = haversine(lat, lon, row['lat'], row['lon'])
                        if dist <= radius:
                            results.append(dict(row) | {"distance": round(dist, 1)})
                    markets = results
                else:
                    cur.execute(f"""
                        SELECT market_name, city, state, y AS lat, x AS lon
                        FROM farmers_markets
                        WHERE LOWER({search_type}) = %s
                    """, (query_value.lower(),))
                    markets = [dict(row) for row in cur.fetchall()]

            if not markets:
                print("\n‚ùå –†—ã–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                if sort_mode == 1:
                    markets.sort(key=lambda x: x['market_name'])
                elif sort_mode == 2:
                    markets.sort(key=lambda x: x['market_name'], reverse=True)
                elif sort_mode == 3:
                    # –î–æ–±–∞–≤–∏–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                    with conn.cursor() as cur:
                        cur.execute("""
                            SELECT fm.market_name, COALESCE(AVG(r.rating), 0) AS avg_rating
                            FROM farmers_markets fm
                            LEFT JOIN reviews r ON fm.market_id = r.market_id
                            GROUP BY fm.market_name
                        """)
                        rating_map = {row['market_name']: row['avg_rating'] for row in cur.fetchall()}
                    for m in markets:
                        m['avg_rating'] = rating_map.get(m['market_name'], 0)
                    markets.sort(key=lambda x: x['avg_rating'], reverse=True)

                # –í—ã–≤–æ–¥
                print(f"\n–ù–∞–π–¥–µ–Ω–æ: {len(markets)} —Ä—ã–Ω–∫–æ–≤")
                for m in markets:
                    dist = f" | {m['distance']} –º–∏–ª—å" if 'distance' in m else ""
                    avg = m.get('avg_rating', 0)
                    stars = "‚òÖ" * int(round(avg)) + "‚òÜ" * (5 - int(round(avg)))
                    print(f"üìç {m['market_name']} | {m['city']}, {m['state']} | {stars}{dist}")

                # –î–µ—Ç–∞–ª–∏
                if input("\n–û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏? (–¥–∞/–Ω–µ—Ç): ").strip().lower() in ['–¥–∞', 'yes', 'y']:
                    name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞: ").strip()
                    if name:
                        farm_detail_information(name)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        finally:
            conn.close()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_function():
    menu_dict = {
        1: [farm_list_function, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏—Ö —Ä—ã–Ω–∫–æ–≤"],
        2: [search_farm_function, "–ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É, —à—Ç–∞—Ç—É, –∏–Ω–¥–µ–∫—Å—É –∏–ª–∏ —Ä–∞–¥–∏—É—Å—É"],
        3: [farm_detail_information, "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ"],
        4: [input_feedback_function, "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä—ã–Ω–∫–µ"],
        5: [delete_farm_function, "–£–¥–∞–ª–∏—Ç—å —Ä—ã–Ω–æ–∫"],
        0: [None, "–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"]
    }

    print("üåæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏–º–∏ —Ä—ã–Ω–∫–∞–º–∏!\n")

    while True:
        choice = show_menu(menu_dict)
        flag, action = find_in_menu(menu_dict, choice)
        if flag:
            print(action)
            break
        else:
            if isinstance(action, str):
                print(action)
            else:
                action()


if __name__ == "__main__":
    main_function()